{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This document aims to help you explore Git and Github's version control capabilities. The core idea behind using Git and Github is to have full control over the stability and evolution of a project. This guide will direct you on the basic initialization steps you will need to gain these benefits in your project development.</p> <p>To learn more about Git, Github and version control take a look at Github's introductory documentation.</p>"},{"location":"#is-this-guide-for-you","title":"Is This Guide for You?","text":"<p>This guide has been created for beginner level developers with no prior experience in version control, Git or Github. Using our detailed instructions, explanations and visual cues you will learn the basic workflow around version control in development.</p> <p>By the end of this guide, you will be able to</p> <ul> <li> <p>Create a local repository using Git's version control commands on the command line interface</p> </li> <li> <p>Link your local repository to a remote repository hosted on Github</p> </li> <li> <p>Create branches on your local respository to safely make additions to an existing project</p> </li> </ul>"},{"location":"#software-versions","title":"Software Versions","text":"<p>This guide has been produced for the 2.40.0 version of Git for the Windows 10 OS. If you are using an older version of Git we recommend you use documentation relevant to that version.</p> <p>There are also separate instruction guides available for macOS and Linux.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Have access to a computer with a functioning Windows 10 OS</p> </li> <li> <p>Have access to a keyboard and mousepad connected to your computer</p> </li> <li> <p>Have access to an internet connection</p> </li> <li> <p>Install a web browser on your computer</p> </li> <li> <p>Install VSCode on your computer</p> </li> <li> <p>Have a basic understanding of VSCode</p> </li> <li> <p>Install Git and Git Bash on your computer</p> </li> <li> <p>Have a basic understanding of Git Bash commands</p> </li> <li> <p>Create a Github account</p> </li> </ul>"},{"location":"#typographical-conventions","title":"Typographical Conventions","text":"<p>This guide uses the typographical conventions specified below to make the content easier to follow and use.</p>"},{"location":"#commands","title":"Commands","text":"<p>Commands expected to be written in a command line interface will be wrapped in a code block. E.g.</p> <pre><code>// git command goes here\n</code></pre> <p>The icon to the right of the code block allows you to copy the contents inside it, so that you can simply paste it on your own device.</p> <p>When referencing a small portion of code written in the command line interface inline content will have a black background and distinct font. For example <code>like this</code>.</p>"},{"location":"#glossary-terms","title":"Glossary Terms","text":"<p>Glossary terms will be highlighted in bold. Further explanation on what they mean can be found in the glossary section of the document.</p> <p>An example of this can be seen above with the term command line interface.</p>"},{"location":"#menu-option-sequence","title":"Menu &amp; Option Sequence","text":"<p>Menu and option names will be enclosed in square brackets. The &gt; symbol indicates the sequence in which menu, option and button names should be clicked. E.g.</p> <p>[Start] &gt; [Power] &gt; [Restart]</p>"},{"location":"#user-inputs","title":"User Inputs","text":"<p>Occasionally the guide will require you input information unique to your personal progress through the process. A description of what this information is will be wrapped between a less than and greater than sign. E.g.</p> <p>https://&lt;url_to_a_website&gt;</p>"},{"location":"#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p>Any keyboard shortcuts referenced in this guide will be wrapped in curly braces. If multiple keys need to be pressed together they will be separated by a plus sign. E.g.</p> <p>Ctrl+C</p>"},{"location":"#admonitions","title":"Admonitions","text":"<p>This guide uses information and warnings blocks to provide additional context around specific actions. These elements look as follows</p> Info <p>Provides additional information surrounding a step in the instructions. It is always wrapped in a blue content box, with an i icon on the far left.</p> Tip <p>Provides non critical but useful information surrounding a step in the instructions. It is always wrapped in a cyan content box, with a flame icon on the far left.</p> Warning <p>Provides information surrounding a step in the instructions that can be difficult to achieve due to some misleading feature. It is always wrapped in an orange content box, with an exclamation mark on the far left.</p> Danger <p>Provides context around common errors that can be encountered whilst following the instruction set. It is always wrapped in a red content box, with a lightning bolt icon on the far left.</p> Success <p>Provides a description or explanation of the output that should be achieved if a task is successful where relevant. Often it will include an embedded image to give a visual cue for what a successful action looks like. It is always wrapped in a green content box, with a tick icon on the far left.</p> <p>All admonitions can be minimized and expanded by clicking on the colored header bar.</p>"},{"location":"branching/","title":"Task 2 - Creating and Merging a Branch on a Local Repository","text":"<p>Creating a branch allows a developer to create a duplicate of their local repository to create changes on. This means any changes that damage the project structure are easily reversible by simply switching back to the original branch. In this section we will go through how to</p> <ul> <li> <p>create a branch in your local repository</p> </li> <li> <p>add changes to a branch</p> </li> <li> <p>merge changes from one branch to another</p> </li> </ul>"},{"location":"branching/#task-21-creating-a-new-branch","title":"Task 2.1 - Creating a New Branch","text":"<p>1. In VSCode open up the integrated terminal and ensure the terminal path matches the location of your local repository.</p> Hotkey for opening the integrated terminal <p>Pressing Ctrl+J with VSCode open will automatically open the integrated terminal.</p> <p>2. On the right side tab of the terminal, check to see if your current terminal is <code>bash</code>. If not click the [\u02c5] arrow beside the [+] button on the top right menu in the terminal. From the drop down list select <code>Git Bash</code>.</p> Success <p>The terminal should open a new window labelled <code>bash</code>.</p> <p></p> I can't find Git Bash in the drop down list <p>Check to ensure that you have installed Git and Git Bash correctly. In your current terminal input the following code</p> <pre><code>git --version\n</code></pre> <p>If a version is not returned then your installation was most likely not successful.</p> <p>3. Input the following command in the terminal to create a new branch and give it a suitable name</p> <pre><code>git checkout -b &lt;branch_name&gt;\n</code></pre> What is git checkout? <p><code>git checkout</code> is an opening phrase which tells the Git scripting language that the user is attempting to view the data in a different branch. In normal circumstances the command is immediately followed by the branch name of the branch you are trying to view.</p> What does the -b flag do? <p>Flags in Git are an additional modifier included when the action being taken needs to be modified due to a unique circumstance. In this case <code>-b</code> informs the Git scripting language that we are both creating a new branch and changing branches to view it at the same time.</p> Best practices for naming a branch <p>In the tech industry branches are generally distinguished by the type of change you are trying to create. This is usually either a bug-fix, feature or development. The naming convention is <code>&lt;type_of_change&gt;/&lt;change_description&gt;</code>. For example <code>bug-fix/fix-image-routes</code>.</p> Success <p>The terminal should return the following message <code>Switched to a new branch &lt;branch_name&gt;</code></p> <p></p>"},{"location":"branching/#task-22-add-changes-to-a-branch","title":"Task 2.2 - Add Changes to a Branch","text":"<p>1. Create your desired modifications to your project files now that you are on your new branch.</p> <p>2. Input the following command in the terminal to make the Git scripting language aware of the changes you want to add.</p> <pre><code>git add .\n</code></pre> What does git add . do? <p><code>git add</code> informs the Git scripting language of what files you want it to update on its copy of your project. The <code>.</code> that follows it a shorthand that tells the Git scripting language that we want it to update changes on all the files that have been modified. If you wanted to add a specific set of files, you would run the <code>git add &lt;file_name&gt;</code> command for each one.</p> <p>3. Input the following command in the terminal to make the Git scripting language update its version of your project with the highlighted changes.</p> <pre><code>git commit -m \"&lt;description_of_the_changes_made&gt;\"\n</code></pre> What is git commit? <p><code>git commit</code> informs the Git scripting language to transfer any changes added with the <code>git add</code> command onto its copy of your project. After this command is run with the <code>git add .</code> command there are no changes between the project in your OS memory and the version being stored by Git.</p> What does the -m flag do? <p>Flags in Git are an additional modifier included when the action being taken needs to be modified due to a unique circumstance. In this case <code>-m</code> informs the Git scripting language that we are both creating a new commit and creating a message to describe it at the same time.</p> Always make sure your commits have a meaningful message <p>Work that has been committed is viewed by colleagues and potentially even yourself down the line. Having a meaningful description of each incremental change makes it clear from the outside in as to what your thought process and approach was.</p> Success <p>The terminal should return a message listing out the number of files changed and the number of lines inserted and deleted. Followed by a line ending with the file name and beginning with <code>create mode</code> for every new file created.</p> <p> </p>"},{"location":"branching/#task-23-merge-changes-from-one-branch-to-another","title":"Task 2.3 - Merge Changes From One Branch to Another","text":"<p>1. Input the following command in the terminal to swap back to your original branch.</p> <pre><code>git checkout &lt;original_branch_name&gt;\n</code></pre> What is git checkout? <p><code>git checkout</code> is an opening phrase which tells the Git scripting language that the user is attempting to view the data stored in a different branch. In normal circumstances the command is immediately followed by the branch name of the branch you are trying to view.</p> Can't remember the name for your original branch? <p>The <code>git branch</code> command will present you with a list of branches in your local repository. Find the name of the branch in the list and then use it with the <code>git checkout</code> command.</p> Success <p>The terminal should return `Switched to branch 'master'</p> <p></p> <p>2. Now that you are on the original branch, input the command below in the terminal to merge your new branch into it.</p> <pre><code>git merge &lt;new_branch_name&gt;\n</code></pre> What is git merge? <p><code>git merge</code> informs the Git scripting language to merge the changes on the branch name written at the end of the command with the branch the developer is currently on.</p> What happens to my new branch after I merge? <p>Nothing! Your new branch still exists. Though any further changes you make outside the branch will not be stored in the branch's version of your project.</p> Success <p>The terminal should return <code>Fast-forward</code> followed by an account of files changed and lines that have been inserted and deleted. Followed by a line ending with the file name and beginning with <code>create mode</code> for every new file created.</p> <p></p>"},{"location":"branching/#conclusion","title":"Conclusion","text":"<p>After having completed this section of the instructions, you should be able to</p> <p>\u2714 Run Git scripting language commands in order to create a new branch of a local repository</p> <p>\u2714 Run Git scripting language commands in order to update the branch with changes you have made.</p> <p>\u2714 Run Git scripting language commands in order to merge your new branch with the original branch.</p> <p>If you would like to explore some of the more advanced features the Git scripting language has to offer in terms of branching and merging, click here.</p>"},{"location":"glossary/","title":"Glossary","text":"<p>This section of the documentation is intended to help users with understanding the common terms that are used when using GitHub.The following terms are necessary to know to understand the user documentation for GitHub:</p> <ul> <li> <p><code>Version control</code> -  A system that tracks changes to files of code over time. It allows multiple users to collaborate on the same code.</p> </li> <li> <p><code>GitHub</code> -   a web platform that allows users to hosts Git repositories.</p> </li> <li> <p><code>Git</code> -  A system that tracks changes to files and directories. It also provides a history of changes.</p> </li> <li> <p><code>Local Repository</code> -  A location on your pc where code and related files for a particular project are stored and managed.</p> </li> <li> <p><code>Remote Repository</code> -  A location on GitHub where code and related files for a particular project are stored and managed.</p> </li> <li> <p><code>Command line interface</code> -  A text based interface for interacting with a computer system.</p> </li> <li> <p><code>Terminal</code> - A program that provides access to a command line interface, can be used interchangeably with command line interface.</p> </li> <li> <p><code>Git Bash</code> -  A command line interface for that provides access to Git.</p> </li> <li> <p><code>Bash</code> - A command language that allows users to interact with the system.</p> </li> <li> <p><code>Git directory</code> -  A folder that contains all of the files and directories for a Git project.</p> </li> <li> <p><code>Git status</code> -  A command that displays the  state of a Git repository, including any that have been added or deleted.</p> </li> <li> <p><code>Initialize</code> - the process of creating a new Git repository for a project.</p> </li> <li> <p><code>Commit</code> - a capture of the state of the files in a Git repository.</p> </li> <li> <p><code>Push</code> - the process of uploading your local Git repository's committed changes to a remote repository on GitHub.</p> </li> <li> <p><code>Track</code> - the process of adding files or changes to the waiting area of a Git repository.</p> </li> <li> <p><code>Branch</code> - a copy of a project's code that allows you to make changes without affecting the original version.</p> </li> <li> <p><code>Merge</code> - the process of integrating changes from one branch of a Git repository into another branch.</p> </li> </ul>"},{"location":"localRepo/","title":"Task 1 - Creating a Local Repository","text":"<p>The purpose of this section of the documentation is to help new developers use Git on the command line interface to create a local backup of their work. In this section we will go through how to</p> <ul> <li> <p>Initialize a Git repository</p> </li> <li> <p>Add your changes to the local repository</p> </li> </ul>"},{"location":"localRepo/#task-11-initialize-a-git-repository","title":"Task 1.1 - Initialize a Git Repository","text":"<p>1. To begin with make sure you have VSCode's integrated terminal open on the directory you want to store in your local repository.</p> Hotkey for opening the integrated terminal <p>Pressing Ctrl+J with VSCode open will automatically open the integrated terminal.</p> <p>2. On the right side tab of the terminal, check to see if your current terminal is <code>bash</code>. If not click the [\u02c5] arrow beside the [+] button on the top right menu in the terminal. From the drop down list select <code>Git Bash</code>.</p> Success <p>The terminal should open a new window labelled <code>bash</code>.</p> <p></p> I can't find Git Bash in the drop down list <p>Check to ensure that you have installed Git and Git Bash correctly. In your current terminal input the following code</p> <pre><code>git --version\n</code></pre> <p>If a version is not returned then your installation was most likely not successful.</p> <p>3. The first step in creating a local repository is to initialize it using the Git scripting language. To do this, input the following command into the command line interface.</p> <pre><code>git init\n</code></pre> What is git init? <p><code>git init</code> informs the Git scripting language to create a .git directory at your current location in the terminal. The .git directory is where your local repository is stored.</p> Success <p>When opening file explorer and navigating to the filepath your project is in, you should see a .git directory.</p> <p></p> I can't see the .git folder in my project directory <p>It is possible that you cannot see the folder even though it exists due to your system settings. Folders beginning with <code>.</code> are hidden folders and by default are not visible in File Explorer. To learn how to change these settings, click here.</p> <p>4. Run the following command to create a README file:</p> <pre><code>&gt;&gt; README.md\n</code></pre> What does &gt;&gt; do? <p><code>&gt;&gt;</code> is a snippet of the Bash scripting language used by the Git Bash terminal. The shorthand asks Bash to create a file in the current directory with whatever name and extension follows it.</p> Why include a README? <p>For any project it is recommended to include a README.md file. README files serve as a space where you can make a more detailed summary of the technology, functionality and structure of a project. At the very least this is very useful when returning to old work after a while. To learn more click here.</p> Success <p>In the [Explorer] tab in VSCode you should see a file called <code>README.md</code> added to the list of files inside the project directory.</p> <p></p>"},{"location":"localRepo/#task-12-add-your-changes-to-the-local-respository","title":"Task 1.2 - Add Your Changes to The Local Respository","text":"<p>1. Run the following command in the command line interface to ensure that the Git scripting language can see all the files in the directory.</p> <pre><code>git status\n</code></pre> What does git status do? <p><code>git status</code> displays a list of paths inside the project which are different from the information that is stored in the local repository. When you first start a repository every file in the project should appear marked in red after the command is run.</p> Success <p>A list of filepaths marked in red. The list should include every file in the project.</p> <p></p> <p>2. Input the following command in the terminal to make the Git scripting language aware of the changes you want to add.</p> <pre><code>git add .\n</code></pre> What does git add . do? <p><code>git add</code> informs the Git scripting language of what files you want it to update on its copy of your project. The <code>.</code> that follows it a shorthand that tells the Git scripting language that we want it to update changes on all the files that have been modified. If you wanted to add a specific set of files, you would run the <code>git add &lt;file_name&gt;</code> command for each one.</p> <p>3. Run the command from step 1 once more to ensure that the Git scripting language is now tracking changes in all the files in the directory.</p> <pre><code>git status\n</code></pre> Success <p>A list of filepaths prefixed with <code>new file:</code> and marked in green. The list should include every file in the project.</p> <p></p> <p>4. Finalize those changes by adding the following command into the command line interface. This so that the Git scripting language knows that these changes are authorized to save in the repository</p> <pre><code>git commit -m \"&lt;description_of_the_changes_made&gt;\"\n</code></pre> What is git commit? <p><code>git commit</code> informs the Git scripting language to transfer any changes added with the <code>git add</code> command onto its copy of your project. After this command is run with the <code>git add .</code> command there are no changes between the project in your OS memory and the version being stored by Git.</p> What does the -m flag do? <p>Flags in Git are an additional modifier included when the action being taken needs to be modified due to a unique circumstance. In this case <code>-m</code> informs the Git scripting language that we are both creating a new commit and creating a message to describe it at the same time.</p> Always make sure your commits have a meaningful message <p>Work that has been committed is viewed by colleagues and potentially even yourself down the line. Having a meaningful description of each incremental change makes it clear from the outside in as to what your thought process and approach was.</p> Success <p>For every file in the project an output should be generated containing the file name prefixed by <code>create mode</code> and a string of numbers.</p> <p></p> <p>5. Run the <code>git status</code> command from step 1 and 3 to confirm that the changes have been moved over to your local repository.</p> <pre><code>git status\n</code></pre> Success <p>The returned message should end with <code>nothing to commit, working tree clean</code>. This means that your local repository and the project on your OS are now in sync.</p> <p></p>"},{"location":"localRepo/#conclusion","title":"Conclusion","text":"<p>After having completed this section of the instructions, you should be able to</p> <p>\u2714 Run Git scripting language commands in order to create a new local repository</p> <p>\u2714 Run Git scripting language commands in order to update a local repository with new changes</p> <p>If you would like to explore some of the more advanced features the Git scripting language has to offer in terms of creating local repositories, click here.</p>"},{"location":"remote/","title":"Task 3 - Creating a Remote Repository","text":""},{"location":"remote/#task-3-creating-a-remote-repository","title":"Task 3 - Creating a Remote Repository","text":"<p>A remote repository allows a developer or organization to store the current version(s) of a project where others can access it. In this section we will go through how to</p> <ul> <li> <p>create a remote repository</p> </li> <li> <p>link a remote repository to a local repository</p> </li> </ul>"},{"location":"remote/#task-31-creating-a-new-remote-repository","title":"Task 3.1 - Creating a New Remote Repository","text":"<p>1. Log into Github using your Github account credentials. After logging in you should see a page displaying a list of repositories on the left.</p> Success <p>A successful login should take you to the page displayed below</p> <p></p> <p>2. Click on the [New] button in the section listing repositories on the left tab of the homepage in order to navigate to the page for creating a new remote repository.</p> Missing [New] button <p>If you can't see the [New] button it might be due to the size of your web browser. Try resizing the browser to fill the screen if it isn't already full screen.</p> Redirect to the new repository form using the URL <p>In the future you can load directly into www.github.com/new once logged in and skip right to step 3 of this task.</p> Success <p>Clicking the [New] button should take you to the page displayed below</p> <p></p> <p>3. Fill in the repository name and description inputs with a meaningful name and a summary for your project goal.</p> Name and describe repositories the way employers want <p>The repository name is an opportunity to describe the project's functionality in two to three words. The description is an opportunity for a project summary in two to three sentences. Try keep this mind when making new repositories!</p> Success <p>After you have filled these inputs the top section of your form should look something like this.</p> <p></p> <p>4. Decide whether you would like for the repository to be [Public] or [Private]. Public repositories are visible to the internet, whereas private repositories are shared only to those you choose.</p> Default to private, change to public <p>If a repository is being made for learning purposes it is usually best to start it off as private. From there, if you want to make it visible for employment of business purposes, the repository visibility can be changed to public through its settings. To learn how click here.</p> Success <p>After you have selected your choice the middle section of the form should look like this.</p> <p></p> <p>5. If you haven't already, include a README file and select the project's main language in the drop down list for .gitignore templates</p> What is a .gitignore file? <p>The .gitignore file is used by Github to identify any files on your local repository that shouldn't be saved on its cloud service. By selecting your main project language Github produces an intelligent template of file types that would be unnecessary or dangerous to store. To learn more click here.</p> I can't find Javascript in the drop down list <p>Javascript uses a runtime environment called Node when it is used outside of the browser. If your file uses Javascript, find Node from the drop down list.</p> Why include a README? <p>For any project it is recommended to include a README.md file. README files serve as a space where you can make a more detailed summary of the technology, functionality and structure of a project. At the very least this is very useful when returning to old work after a while. To learn more click here.</p> <p>6. If your repository is public, choose a license for your work that defines the regulations around your code being used by others.</p> The MIT license is your best friend <p>The MIT license is simple, easy to understand and quite fair, making it my personal recommendation for learning projects. Important points are that it allows for free distribution of the work with no liability on the original author. To learn more click here.</p> <p>7. Select the [Create repository] button on the bottom of the page to create your remote repository.</p> Success <p>After creating your repository you should be redirected to the following page</p> <p></p>"},{"location":"remote/#task-32-linking-the-remote-repository-to-the-local-repository","title":"Task 3.2 - Linking The Remote Repository to The Local Repository","text":"<p>1. On the main page for your newly created remote repository, click on the big green [Code] button and make sure the [HTTPS] button is selected.</p> I can't see the [Code] button <p>If you can't see the [Code] button it might be due to the size of your web browser. Try resizing the browser to fill the screen if it isn't already full screen.</p> I can't tell if [HTTPS] is selected <p>It can be difficult to tell whether you have selected [HTTPS] or [SSH] due to Github's design. Selected buttons are either a shade darker or underlined depending on the view.</p> Success <p>If you have selected the [HTTPS] button it should be underlined and the input field below it should contain a url. An example of this can be seen below</p> <p></p> <p>2. Copy the url provided in the input field below the [HTTPS] button.</p> What is the url for? <p>The url provided by Github serves as a path for the Git scripting language to locate the internet based storage space they are providing.</p> <p>3. In VSCode open up the integrated terminal and ensure the terminal path matches the location of your local repository.</p> Hotkey for opening the integrated terminal <p>Pressing Ctrl+J with VSCode open will automatically open the integrated terminal.</p> <p>4. On the right side tab of the terminal, check to see if your current terminal is <code>bash</code>. If not click the [\u02c5] arrow beside the [+] button on the top right menu in the terminal. From the drop down list select <code>Git Bash</code>.</p> Success <p>The terminal should open a new window labelled <code>bash</code>.</p> <p></p> I can't find Git Bash in the drop down list <p>Check to ensure that you have installed Git and Git Bash correctly. In your current terminal input the following code</p> <pre><code>git --version\n</code></pre> <p>If a version is not returned then your installation was most likely not successful.</p> <p>5. Run the following command to link your local and remote repositories.</p> <pre><code>git remote add origin &lt;paste_link_here&gt;\n</code></pre> What is git remote? <p><code>git remote</code> is an opening phrase which informs the Git scripting language that the actions that follow are in relation to a remote or internet hosted repository.</p> What is add origin? <p><code>add origin</code> asks the Git scripting language to create a link to a remote repository called origin that follows the path of the url placed after it.</p> <p>5. If your current branch is master, run the following command in the command line interface to change its name to main</p> <pre><code>git branch -M main\n</code></pre> What does git branch do? <p><code>git branch</code> is an opening phrase which informs the Git scripting language that the actions that follow are in relation to one or more branches.</p> What does the -M flag do? <p>Flags in Git are an additional modifier included when the action being taken needs to be modified due to a unique circumstance. In this case <code>-M</code> informs the Git scripting language that we are renaming the original branch of this repository to whatever follows the flag.</p> Why am I changing the branch name to main? <p>Github's main branch is called main. Having your main branches on your local and remote repository called something different can cause complications, so it is recommended to make them match.</p> <p>6. Run the following command to retrieve your .gitignore file from the remote repository.</p> <pre><code>git pull --set-upstream origin main --allow-unrelated-histories\n</code></pre> What is git pull? <p><code>git pull</code> retrieves updates from the remote repository and integrates it into your local repository.</p> What does the --set-upstream flag do? <p>Flags in Git are an additional modifier included when the action being taken needs to be modified due to a unique circumstance. In this case <code>--set-upstream</code> informs the Git scripting language that we are also configuring the location for where changes are supposed to be sent to. The <code>--set-upstream</code> flag only needs to be used when you are pulling from a remote repository for the first time.</p> What does origin main do? <p>The <code>--set-upstream</code> flag has informed Git we are configuring what remote repository to retrieve our data from with <code>git pull</code>. The <code>origin master</code> clause now tells Git what remote repository and what branch to retrieve the data from.</p> What does the --allow-unrelated-histories flag do? <p>Flags in Git are an additional modifier included when the action being taken needs to be modified due to a unique circumstance. In this case <code>--allow-unrelated-histories</code> informs the Git scripting language that we are merging two repositories which have separate files and commit in them. This flag needs to be used because behind the scenes Github created a commit on the local repository in order to create our .gitignore file</p> Success <p>The terminal should return an address from which the data was pulled alongside the branch. After this it return a message listing out the number of files changed and the number of lines inserted and deleted. Followed by a line ending with the file name and beginning with <code>create mode</code> for every new file created.</p> <p></p> <p>7. Run the following command to upload all of your added and committed changes onto Github's remote repository.</p> <pre><code>git push\n</code></pre> What is git push? <p><code>git push</code> is used to update a remote repository with the changes that have been made on the local file system. It can be thought of as the command for saving a backup of your committed work on the internet.</p> Success <p>The terminal should return several lines outlining the procedure it took to perform the action. These lines will end with a link to the remote repository, an ID of letters and numbers. All alongside a small graphic showing which branch from your local repository the data was taken from and which branch in your remote repository it went to.</p> <p></p> <p>8. Refresh the page on your Github repository in the browser and ensure that all the changes you pushed have made their way across.</p> Success <p>If the push was successful you should now see a list of all your project files on Github</p> <p></p>"},{"location":"remote/#conclusion","title":"Conclusion","text":"<p>After having completed this section of the instructions, you should be able to</p> <p>\u2714 Walk through Github's repository creation process in order to create a remote repository</p> <p>\u2714 Run Git scripting language commands in order to link your remote and local repositories.</p> <p>If you would like to explore some of the more advanced features Github has to offer in terms of managing remote repositories, explore Github's documentation.</p>"},{"location":"trouble/","title":"Troubleshooting","text":"<p>This section of the documentation is meant to help users with common problems and <code>errors</code> that can happen when using GitHub. The information below is organized in a way that common problems and <code>errors</code> are labeled with danger or warning. The steps needed to troubleshoot the <code>error</code> is labeled success.</p>"},{"location":"trouble/#error-aborting-commit-due-to-empty-commit-message","title":"Error: Aborting commit due to empty commit message","text":"<p>Danger</p> <p>This error occurs when you try to commit changes without providing a commit message.</p> <p>Success<p>This error can be fixed by adding a commit message after the commit in quotation</p> </p>"},{"location":"trouble/#fatal-error-not-a-git-repository","title":"Fatal Error: Not a git repository","text":"<p>Danger<p>This error occurs when you try to run a Git command in a directory that is not a Git repository.</p> </p> <p>Success<p>This error is fixed by changing to an existing branch before pushing the changes to git</p> </p>"},{"location":"trouble/#error-cannot-push-to-repository","title":"Error: Cannot push to repository","text":"<p>Danger</p> <p>This error occurs when you try to push changes to a repository whilst your branch or project is outdated in comparison to it.</p> <p>Success<p>This error can be fixed by first doing a git pull so that the branch is up to date with the repository, then you can do a git push.</p> </p>"},{"location":"trouble/#i-cant-find-the-code-button-in-my-remote-repository","title":"I can't find the [Code] button in my remote repository","text":"<p>Warning</p> <p>This issue occurs when viewing GitHub on a minimized screen or smaller screen.</p> <p>Success<p>This can be fixed by resizing the screen to full size.</p> </p>"},{"location":"trouble/#i-cant-see-any-of-my-code-even-though-i-just-pushed-it-to-my-remote-repository","title":"I can't see any of my code even though I just pushed it to my remote repository","text":"<p>Warning</p> <p>This issue occurs when viewing GitHub on a minimized screen or smaller screen.</p> <p>Success<p>This  can be fixed by clicking on the words view code on the GitHub repository page.</p> </p>"}]}